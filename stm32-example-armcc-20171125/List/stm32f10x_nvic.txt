; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: armcc [4d3621]
; commandline armcc [--list --debug -c --asm --interleave --output_dir=Obj --asm_dir=List --depend_dir=Obj --list_dir=List --md --cpu=Cortex-M3 --apcs=interwork -O0 -ISource/FWLib/inc -ISource -DSTM32F10X_HD Source/FWLib/src/stm32f10x_nvic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_DeInit PROC
;;;35     *******************************************************************************/
;;;36     void NVIC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;37     {
;;;38       u32 index = 0;
;;;39       
;;;40       NVIC->ICER[0] = 0xFFFFFFFF;
000002  1e41              SUBS     r1,r0,#1
000004  4aed              LDR      r2,|L1.956|
000006  6011              STR      r1,[r2,#0]
;;;41       NVIC->ICER[1] = 0x0FFFFFFF;
000008  090a              LSRS     r2,r1,#4
00000a  49ec              LDR      r1,|L1.956|
00000c  3980              SUBS     r1,r1,#0x80
00000e  f8c12084          STR      r2,[r1,#0x84]
;;;42       NVIC->ICPR[0] = 0xFFFFFFFF;
000012  1e41              SUBS     r1,r0,#1
000014  f04f22e0          MOV      r2,#0xe000e000
000018  f8c21280          STR      r1,[r2,#0x280]
;;;43       NVIC->ICPR[1] = 0x0FFFFFFF;
00001c  090a              LSRS     r2,r1,#4
00001e  49e8              LDR      r1,|L1.960|
000020  600a              STR      r2,[r1,#0]
;;;44       
;;;45       for(index = 0; index < 0x0F; index++)
000022  bf00              NOP      
000024  e004              B        |L1.48|
                  |L1.38|
;;;46       {
;;;47          NVIC->IPR[index] = 0x00000000;
000026  2200              MOVS     r2,#0
000028  49e6              LDR      r1,|L1.964|
00002a  f8412020          STR      r2,[r1,r0,LSL #2]
00002e  1c40              ADDS     r0,r0,#1              ;45
                  |L1.48|
000030  280f              CMP      r0,#0xf               ;45
000032  d3f8              BCC      |L1.38|
;;;48       } 
;;;49     }
000034  4770              BX       lr
;;;50     
                          ENDP

                  NVIC_SCBDeInit PROC
;;;58     *******************************************************************************/
;;;59     void NVIC_SCBDeInit(void)
000036  2000              MOVS     r0,#0
;;;60     {
;;;61       u32 index = 0x00;
;;;62       
;;;63       SCB->ICSR = 0x0A000000;
000038  f04f6120          MOV      r1,#0xa000000
00003c  4ae2              LDR      r2,|L1.968|
00003e  6011              STR      r1,[r2,#0]
;;;64       SCB->VTOR = 0x00000000;
000040  2100              MOVS     r1,#0
000042  1d12              ADDS     r2,r2,#4
000044  6011              STR      r1,[r2,#0]
;;;65       SCB->AIRCR = AIRCR_VECTKEY_MASK;
000046  49e1              LDR      r1,|L1.972|
000048  1d12              ADDS     r2,r2,#4
00004a  6011              STR      r1,[r2,#0]
;;;66       SCB->SCR = 0x00000000;
00004c  2100              MOVS     r1,#0
00004e  1d12              ADDS     r2,r2,#4
000050  6011              STR      r1,[r2,#0]
;;;67       SCB->CCR = 0x00000000;
000052  1d12              ADDS     r2,r2,#4
000054  6011              STR      r1,[r2,#0]
;;;68       for(index = 0; index < 0x03; index++)
000056  bf00              NOP      
000058  e005              B        |L1.102|
                  |L1.90|
;;;69       {
;;;70          SCB->SHPR[index] = 0;
00005a  2200              MOVS     r2,#0
00005c  49da              LDR      r1,|L1.968|
00005e  3114              ADDS     r1,r1,#0x14
000060  f8412020          STR      r2,[r1,r0,LSL #2]
000064  1c40              ADDS     r0,r0,#1              ;68
                  |L1.102|
000066  2803              CMP      r0,#3                 ;68
000068  d3f7              BCC      |L1.90|
;;;71       }
;;;72       SCB->SHCSR = 0x00000000;
00006a  2100              MOVS     r1,#0
00006c  4ad6              LDR      r2,|L1.968|
00006e  3220              ADDS     r2,r2,#0x20
000070  6011              STR      r1,[r2,#0]
;;;73       SCB->CFSR = 0xFFFFFFFF;
000072  1e49              SUBS     r1,r1,#1
000074  1d12              ADDS     r2,r2,#4
000076  6011              STR      r1,[r2,#0]
;;;74       SCB->HFSR = 0xFFFFFFFF;
000078  1d12              ADDS     r2,r2,#4
00007a  6011              STR      r1,[r2,#0]
;;;75       SCB->DFSR = 0xFFFFFFFF;
00007c  1d12              ADDS     r2,r2,#4
00007e  6011              STR      r1,[r2,#0]
;;;76     }
000080  4770              BX       lr
;;;77     
                          ENDP

                  NVIC_PriorityGroupConfig PROC
;;;96     *******************************************************************************/
;;;97     void NVIC_PriorityGroupConfig(u32 NVIC_PriorityGroup)
000082  49d2              LDR      r1,|L1.972|
;;;98     {
;;;99       /* Check the parameters */
;;;100      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;101      
;;;102      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;103      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000084  4301              ORRS     r1,r1,r0
000086  4ad0              LDR      r2,|L1.968|
000088  3208              ADDS     r2,r2,#8
00008a  6011              STR      r1,[r2,#0]
;;;104    }
00008c  4770              BX       lr
;;;105    
                          ENDP

                  NVIC_Init PROC
;;;115    *******************************************************************************/
;;;116    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00008e  b5f0              PUSH     {r4-r7,lr}
;;;117    {
;;;118      u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000090  2100              MOVS     r1,#0
000092  2200              MOVS     r2,#0
000094  2300              MOVS     r3,#0
;;;119      u32 tmppre = 0, tmpsub = 0x0F;
000096  2500              MOVS     r5,#0
000098  240f              MOVS     r4,#0xf
;;;120    
;;;121      /* Check the parameters */
;;;122      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;123      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
;;;124      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;125      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;126        
;;;127      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
00009a  78c6              LDRB     r6,[r0,#3]
00009c  2e00              CMP      r6,#0
00009e  d035              BEQ      |L1.268|
;;;128      {
;;;129        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;130        tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
0000a0  4ec9              LDR      r6,|L1.968|
0000a2  3608              ADDS     r6,r6,#8
0000a4  6836              LDR      r6,[r6,#0]
0000a6  f40666e0          AND      r6,r6,#0x700
0000aa  f5c666e0          RSB      r6,r6,#0x700
0000ae  0a31              LSRS     r1,r6,#8
;;;131        tmppre = (0x4 - tmppriority);
0000b0  f1c10504          RSB      r5,r1,#4
;;;132        tmpsub = tmpsub >> tmppriority;
0000b4  40cc              LSRS     r4,r4,r1
;;;133        
;;;134        tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
0000b6  7846              LDRB     r6,[r0,#1]
0000b8  fa06f105          LSL      r1,r6,r5
;;;135        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
0000bc  7886              LDRB     r6,[r0,#2]
0000be  4026              ANDS     r6,r6,r4
0000c0  4331              ORRS     r1,r1,r6
;;;136    
;;;137        tmppriority = tmppriority << 0x04;
0000c2  0109              LSLS     r1,r1,#4
;;;138        tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
0000c4  7806              LDRB     r6,[r0,#0]
0000c6  07b6              LSLS     r6,r6,#30
0000c8  0ef6              LSRS     r6,r6,#27
0000ca  40b1              LSLS     r1,r1,r6
;;;139        
;;;140        tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
0000cc  4ebd              LDR      r6,|L1.964|
0000ce  7807              LDRB     r7,[r0,#0]
0000d0  10bf              ASRS     r7,r7,#2
0000d2  f8562027          LDR      r2,[r6,r7,LSL #2]
;;;141        tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
0000d6  7806              LDRB     r6,[r0,#0]
0000d8  07b6              LSLS     r6,r6,#30
0000da  0ef7              LSRS     r7,r6,#27
0000dc  26ff              MOVS     r6,#0xff
0000de  fa06f307          LSL      r3,r6,r7
;;;142        tmpreg &= ~tmpmask;
0000e2  439a              BICS     r2,r2,r3
;;;143        tmppriority &= tmpmask;  
0000e4  4019              ANDS     r1,r1,r3
;;;144        tmpreg |= tmppriority;
0000e6  430a              ORRS     r2,r2,r1
;;;145    
;;;146        NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
0000e8  4eb6              LDR      r6,|L1.964|
0000ea  7807              LDRB     r7,[r0,#0]
0000ec  10bf              ASRS     r7,r7,#2
0000ee  f8462027          STR      r2,[r6,r7,LSL #2]
;;;147        
;;;148        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;149        NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
0000f2  7806              LDRB     r6,[r0,#0]
0000f4  f006071f          AND      r7,r6,#0x1f
0000f8  2601              MOVS     r6,#1
0000fa  40be              LSLS     r6,r6,r7
0000fc  7807              LDRB     r7,[r0,#0]
0000fe  117f              ASRS     r7,r7,#5
000100  00bf              LSLS     r7,r7,#2
000102  f10727e0          ADD      r7,r7,#0xe000e000
000106  f8c76100          STR      r6,[r7,#0x100]
00010a  e00b              B        |L1.292|
                  |L1.268|
;;;150          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;151      }
;;;152      else
;;;153      {
;;;154        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;155        NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
00010c  7806              LDRB     r6,[r0,#0]
00010e  f006071f          AND      r7,r6,#0x1f
000112  2601              MOVS     r6,#1
000114  40be              LSLS     r6,r6,r7
000116  4fa9              LDR      r7,|L1.956|
000118  f890c000          LDRB     r12,[r0,#0]
00011c  ea4f1c6c          ASR      r12,r12,#5
000120  f847602c          STR      r6,[r7,r12,LSL #2]
                  |L1.292|
;;;156          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;157      }
;;;158    }
000124  bdf0              POP      {r4-r7,pc}
;;;159    
                          ENDP

                  NVIC_StructInit PROC
;;;167    *******************************************************************************/
;;;168    void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
000126  2100              MOVS     r1,#0
;;;169    {
;;;170      /* NVIC_InitStruct members default value */
;;;171      NVIC_InitStruct->NVIC_IRQChannel = 0x00;
000128  7001              STRB     r1,[r0,#0]
;;;172      NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
00012a  7041              STRB     r1,[r0,#1]
;;;173      NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
00012c  7081              STRB     r1,[r0,#2]
;;;174      NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
00012e  70c1              STRB     r1,[r0,#3]
;;;175    }
000130  4770              BX       lr
;;;176    
                          ENDP

                  NVIC_SETPRIMASK PROC
;;;183    *******************************************************************************/
;;;184    void NVIC_SETPRIMASK(void)
000132  b510              PUSH     {r4,lr}
;;;185    {
;;;186      __SETPRIMASK();
000134  f7fffffe          BL       __SETPRIMASK
;;;187    }
000138  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  NVIC_RESETPRIMASK PROC
;;;195    *******************************************************************************/
;;;196    void NVIC_RESETPRIMASK(void)
00013a  b510              PUSH     {r4,lr}
;;;197    {
;;;198      __RESETPRIMASK();
00013c  f7fffffe          BL       __RESETPRIMASK
;;;199    }
000140  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  NVIC_SETFAULTMASK PROC
;;;207    *******************************************************************************/
;;;208    void NVIC_SETFAULTMASK(void)
000142  b510              PUSH     {r4,lr}
;;;209    {
;;;210      __SETFAULTMASK();
000144  f7fffffe          BL       __SETFAULTMASK
;;;211    }
000148  bd10              POP      {r4,pc}
;;;212    
                          ENDP

                  NVIC_RESETFAULTMASK PROC
;;;219    *******************************************************************************/
;;;220    void NVIC_RESETFAULTMASK(void)
00014a  b510              PUSH     {r4,lr}
;;;221    {
;;;222      __RESETFAULTMASK();
00014c  f7fffffe          BL       __RESETFAULTMASK
;;;223    }
000150  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  NVIC_BASEPRICONFIG PROC
;;;233    *******************************************************************************/
;;;234    void NVIC_BASEPRICONFIG(u32 NewPriority)
000152  b510              PUSH     {r4,lr}
;;;235    {
000154  4604              MOV      r4,r0
;;;236      /* Check the parameters */
;;;237      assert_param(IS_NVIC_BASE_PRI(NewPriority));
;;;238      
;;;239      __BASEPRICONFIG(NewPriority << 0x04);
000156  0120              LSLS     r0,r4,#4
000158  f7fffffe          BL       __BASEPRICONFIG
;;;240    }
00015c  bd10              POP      {r4,pc}
;;;241    
                          ENDP

                  NVIC_GetBASEPRI PROC
;;;248    *******************************************************************************/
;;;249    u32 NVIC_GetBASEPRI(void)
00015e  b510              PUSH     {r4,lr}
;;;250    {
;;;251      return (__GetBASEPRI());
000160  f7fffffe          BL       __GetBASEPRI
;;;252    }
000164  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  NVIC_GetCurrentPendingIRQChannel PROC
;;;260    *******************************************************************************/
;;;261    u16 NVIC_GetCurrentPendingIRQChannel(void)
000166  4898              LDR      r0,|L1.968|
;;;262    {
;;;263      return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
000168  6800              LDR      r0,[r0,#0]
00016a  f3c03009          UBFX     r0,r0,#12,#10
;;;264    }
00016e  4770              BX       lr
;;;265    
                          ENDP

                  NVIC_GetIRQChannelPendingBitStatus PROC
;;;273    *******************************************************************************/
;;;274    ITStatus NVIC_GetIRQChannelPendingBitStatus(u8 NVIC_IRQChannel)
000170  b510              PUSH     {r4,lr}
;;;275    {
000172  4601              MOV      r1,r0
;;;276      ITStatus pendingirqstatus = RESET;
000174  2000              MOVS     r0,#0
;;;277      u32 tmp = 0x00;
000176  2200              MOVS     r2,#0
;;;278      
;;;279      /* Check the parameters */
;;;280      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;281      
;;;282      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000178  f001041f          AND      r4,r1,#0x1f
00017c  2301              MOVS     r3,#1
00017e  fa03f204          LSL      r2,r3,r4
;;;283    
;;;284      if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
000182  4b8e              LDR      r3,|L1.956|
000184  3380              ADDS     r3,r3,#0x80
000186  114c              ASRS     r4,r1,#5
000188  f8533024          LDR      r3,[r3,r4,LSL #2]
00018c  4013              ANDS     r3,r3,r2
00018e  4293              CMP      r3,r2
000190  d101              BNE      |L1.406|
;;;285      {
;;;286        pendingirqstatus = SET;
000192  2001              MOVS     r0,#1
000194  e000              B        |L1.408|
                  |L1.406|
;;;287      }
;;;288      else
;;;289      {
;;;290        pendingirqstatus = RESET;
000196  2000              MOVS     r0,#0
                  |L1.408|
;;;291      }
;;;292      return pendingirqstatus;
;;;293    }
000198  bd10              POP      {r4,pc}
;;;294    
                          ENDP

                  NVIC_SetIRQChannelPendingBit PROC
;;;301    *******************************************************************************/
;;;302    void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
00019a  498d              LDR      r1,|L1.976|
;;;303    {
;;;304      /* Check the parameters */
;;;305      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;306      
;;;307      *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
00019c  6008              STR      r0,[r1,#0]
;;;308    }
00019e  4770              BX       lr
;;;309    
                          ENDP

                  NVIC_ClearIRQChannelPendingBit PROC
;;;316    *******************************************************************************/
;;;317    void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
0001a0  f000021f          AND      r2,r0,#0x1f
;;;318    {
;;;319      /* Check the parameters */
;;;320      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;321      
;;;322      NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
0001a4  2101              MOVS     r1,#1
0001a6  4091              LSLS     r1,r1,r2
0001a8  4a85              LDR      r2,|L1.960|
0001aa  1f12              SUBS     r2,r2,#4
0001ac  1143              ASRS     r3,r0,#5
0001ae  f8421023          STR      r1,[r2,r3,LSL #2]
;;;323    }
0001b2  4770              BX       lr
;;;324    
                          ENDP

                  NVIC_GetCurrentActiveHandler PROC
;;;332    *******************************************************************************/
;;;333    u16 NVIC_GetCurrentActiveHandler(void)
0001b4  4884              LDR      r0,|L1.968|
;;;334    {
;;;335      return ((u16)(SCB->ICSR & (u32)0x3FF));
0001b6  6800              LDR      r0,[r0,#0]
0001b8  f3c00009          UBFX     r0,r0,#0,#10
;;;336    }
0001bc  4770              BX       lr
;;;337    
                          ENDP

                  NVIC_GetIRQChannelActiveBitStatus PROC
;;;345    *******************************************************************************/
;;;346    ITStatus NVIC_GetIRQChannelActiveBitStatus(u8 NVIC_IRQChannel)
0001be  b510              PUSH     {r4,lr}
;;;347    {
0001c0  4601              MOV      r1,r0
;;;348      ITStatus activeirqstatus = RESET;
0001c2  2000              MOVS     r0,#0
;;;349      u32 tmp = 0x00;
0001c4  2200              MOVS     r2,#0
;;;350    
;;;351      /* Check the parameters */
;;;352      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;353      
;;;354      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
0001c6  f001041f          AND      r4,r1,#0x1f
0001ca  2301              MOVS     r3,#1
0001cc  fa03f204          LSL      r2,r3,r4
;;;355    
;;;356      if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
0001d0  4b7b              LDR      r3,|L1.960|
0001d2  337c              ADDS     r3,r3,#0x7c
0001d4  114c              ASRS     r4,r1,#5
0001d6  f8533024          LDR      r3,[r3,r4,LSL #2]
0001da  4013              ANDS     r3,r3,r2
0001dc  4293              CMP      r3,r2
0001de  d101              BNE      |L1.484|
;;;357      {
;;;358        activeirqstatus = SET;
0001e0  2001              MOVS     r0,#1
0001e2  e000              B        |L1.486|
                  |L1.484|
;;;359      }
;;;360      else
;;;361      {
;;;362        activeirqstatus = RESET;
0001e4  2000              MOVS     r0,#0
                  |L1.486|
;;;363      }
;;;364      return activeirqstatus;
;;;365    }
0001e6  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  NVIC_GetCPUID PROC
;;;374    *******************************************************************************/
;;;375    u32 NVIC_GetCPUID(void)
0001e8  4877              LDR      r0,|L1.968|
;;;376    {
;;;377      return (SCB->CPUID);
0001ea  1f00              SUBS     r0,r0,#4
0001ec  6800              LDR      r0,[r0,#0]
;;;378    }
0001ee  4770              BX       lr
;;;379    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;392    *******************************************************************************/
;;;393    void NVIC_SetVectorTable(u32 NVIC_VectTab, u32 Offset)
0001f0  4a78              LDR      r2,|L1.980|
;;;394    { 
;;;395      /* Check the parameters */
;;;396      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;397      assert_param(IS_NVIC_OFFSET(Offset));  
;;;398       
;;;399      SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
0001f2  400a              ANDS     r2,r2,r1
0001f4  4302              ORRS     r2,r2,r0
0001f6  4b74              LDR      r3,|L1.968|
0001f8  1d1b              ADDS     r3,r3,#4
0001fa  601a              STR      r2,[r3,#0]
;;;400    }
0001fc  4770              BX       lr
;;;401    
                          ENDP

                  NVIC_GenerateSystemReset PROC
;;;408    *******************************************************************************/
;;;409    void NVIC_GenerateSystemReset(void)
0001fe  4873              LDR      r0,|L1.972|
;;;410    {
;;;411      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
000200  1d00              ADDS     r0,r0,#4
000202  4971              LDR      r1,|L1.968|
000204  3108              ADDS     r1,r1,#8
000206  6008              STR      r0,[r1,#0]
;;;412    }
000208  4770              BX       lr
;;;413    
                          ENDP

                  NVIC_GenerateCoreReset PROC
;;;420    *******************************************************************************/
;;;421    void NVIC_GenerateCoreReset(void)
00020a  4870              LDR      r0,|L1.972|
;;;422    {
;;;423      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
00020c  1c40              ADDS     r0,r0,#1
00020e  496e              LDR      r1,|L1.968|
000210  3108              ADDS     r1,r1,#8
000212  6008              STR      r0,[r1,#0]
;;;424    }
000214  4770              BX       lr
;;;425    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;439    *******************************************************************************/
;;;440    void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
000216  b139              CBZ      r1,|L1.552|
;;;441    {
;;;442      /* Check the parameters */
;;;443      assert_param(IS_NVIC_LP(LowPowerMode));
;;;444      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;445      
;;;446      if (NewState != DISABLE)
;;;447      {
;;;448        SCB->SCR |= LowPowerMode;
000218  4a6b              LDR      r2,|L1.968|
00021a  320c              ADDS     r2,r2,#0xc
00021c  6812              LDR      r2,[r2,#0]
00021e  4302              ORRS     r2,r2,r0
000220  4b69              LDR      r3,|L1.968|
000222  330c              ADDS     r3,r3,#0xc
000224  601a              STR      r2,[r3,#0]
000226  e006              B        |L1.566|
                  |L1.552|
;;;449      }
;;;450      else
;;;451      {
;;;452        SCB->SCR &= (u32)(~(u32)LowPowerMode);
000228  4a67              LDR      r2,|L1.968|
00022a  320c              ADDS     r2,r2,#0xc
00022c  6812              LDR      r2,[r2,#0]
00022e  4382              BICS     r2,r2,r0
000230  4b65              LDR      r3,|L1.968|
000232  330c              ADDS     r3,r3,#0xc
000234  601a              STR      r2,[r3,#0]
                  |L1.566|
;;;453      }
;;;454    }
000236  4770              BX       lr
;;;455    
                          ENDP

                  NVIC_SystemHandlerConfig PROC
;;;469    *******************************************************************************/
;;;470    void NVIC_SystemHandlerConfig(u32 SystemHandler, FunctionalState NewState)
000238  b510              PUSH     {r4,lr}
;;;471    {
;;;472      u32 tmpreg = 0x00;
00023a  2200              MOVS     r2,#0
;;;473    
;;;474      /* Check the parameters */
;;;475      assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
;;;476      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;477      
;;;478      tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
00023c  f000041f          AND      r4,r0,#0x1f
000240  2301              MOVS     r3,#1
000242  fa03f204          LSL      r2,r3,r4
;;;479    
;;;480      if (NewState != DISABLE)
000246  b139              CBZ      r1,|L1.600|
;;;481      {
;;;482        SCB->SHCSR |= tmpreg;
000248  4b5f              LDR      r3,|L1.968|
00024a  3320              ADDS     r3,r3,#0x20
00024c  681b              LDR      r3,[r3,#0]
00024e  4313              ORRS     r3,r3,r2
000250  4c5d              LDR      r4,|L1.968|
000252  3420              ADDS     r4,r4,#0x20
000254  6023              STR      r3,[r4,#0]
000256  e006              B        |L1.614|
                  |L1.600|
;;;483      }
;;;484      else
;;;485      {
;;;486        SCB->SHCSR &= ~tmpreg;
000258  4b5b              LDR      r3,|L1.968|
00025a  3320              ADDS     r3,r3,#0x20
00025c  681b              LDR      r3,[r3,#0]
00025e  4393              BICS     r3,r3,r2
000260  4c59              LDR      r4,|L1.968|
000262  3420              ADDS     r4,r4,#0x20
000264  6023              STR      r3,[r4,#0]
                  |L1.614|
;;;487      }
;;;488    }
000266  bd10              POP      {r4,pc}
;;;489    
                          ENDP

                  NVIC_SystemHandlerPriorityConfig PROC
;;;509    *******************************************************************************/
;;;510    void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
000268  b5f0              PUSH     {r4-r7,lr}
;;;511                                          u8 SystemHandlerSubPriority)
;;;512    {
00026a  4603              MOV      r3,r0
00026c  460c              MOV      r4,r1
00026e  4615              MOV      r5,r2
;;;513      u32 tmp1 = 0x00, tmp2 = 0xFF, handlermask = 0x00;
000270  2000              MOVS     r0,#0
000272  22ff              MOVS     r2,#0xff
000274  2600              MOVS     r6,#0
;;;514      u32 tmppriority = 0x00;
000276  2100              MOVS     r1,#0
;;;515    
;;;516      /* Check the parameters */
;;;517      assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
;;;518      assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
;;;519      assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
;;;520        
;;;521      tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
000278  4f53              LDR      r7,|L1.968|
00027a  3708              ADDS     r7,r7,#8
00027c  683f              LDR      r7,[r7,#0]
00027e  f40767e0          AND      r7,r7,#0x700
000282  f5c767e0          RSB      r7,r7,#0x700
000286  0a39              LSRS     r1,r7,#8
;;;522      tmp1 = (0x4 - tmppriority);
000288  f1c10004          RSB      r0,r1,#4
;;;523      tmp2 = tmp2 >> tmppriority;
00028c  40ca              LSRS     r2,r2,r1
;;;524        
;;;525      tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
00028e  fa04f100          LSL      r1,r4,r0
;;;526      tmppriority |=  SystemHandlerSubPriority & tmp2;
000292  ea050702          AND      r7,r5,r2
000296  4339              ORRS     r1,r1,r7
;;;527    
;;;528      tmppriority = tmppriority << 0x04;
000298  0109              LSLS     r1,r1,#4
;;;529      tmp1 = SystemHandler & (u32)0xC0;
00029a  f00300c0          AND      r0,r3,#0xc0
;;;530      tmp1 = tmp1 >> 0x06; 
00029e  0980              LSRS     r0,r0,#6
;;;531      tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
0002a0  f3c32201          UBFX     r2,r3,#8,#2
;;;532      tmppriority = tmppriority << (tmp2 * 0x08);
0002a4  00d7              LSLS     r7,r2,#3
0002a6  40b9              LSLS     r1,r1,r7
;;;533      handlermask = (u32)0xFF << (tmp2 * 0x08);
0002a8  ea4f0cc2          LSL      r12,r2,#3
0002ac  27ff              MOVS     r7,#0xff
0002ae  fa07f60c          LSL      r6,r7,r12
;;;534      
;;;535      SCB->SHPR[tmp1] &= ~handlermask;
0002b2  4f45              LDR      r7,|L1.968|
0002b4  3714              ADDS     r7,r7,#0x14
0002b6  f8577020          LDR      r7,[r7,r0,LSL #2]
0002ba  43b7              BICS     r7,r7,r6
0002bc  f8dfc108          LDR      r12,|L1.968|
0002c0  f10c0c14          ADD      r12,r12,#0x14
0002c4  f84c7020          STR      r7,[r12,r0,LSL #2]
;;;536      SCB->SHPR[tmp1] |= tmppriority;
0002c8  4667              MOV      r7,r12
0002ca  f8577020          LDR      r7,[r7,r0,LSL #2]
0002ce  430f              ORRS     r7,r7,r1
0002d0  f84c7020          STR      r7,[r12,r0,LSL #2]
;;;537    }
0002d4  bdf0              POP      {r4-r7,pc}
;;;538    
                          ENDP

                  NVIC_GetSystemHandlerPendingBitStatus PROC
;;;551    *******************************************************************************/
;;;552    ITStatus NVIC_GetSystemHandlerPendingBitStatus(u32 SystemHandler)
0002d6  b510              PUSH     {r4,lr}
;;;553    {
0002d8  4602              MOV      r2,r0
;;;554      ITStatus bitstatus  = RESET;
0002da  2000              MOVS     r0,#0
;;;555      u32 tmp = 0x00, tmppos = 0x00;
0002dc  2300              MOVS     r3,#0
0002de  2100              MOVS     r1,#0
;;;556    
;;;557      /* Check the parameters */
;;;558      assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;559      
;;;560      tmppos = (SystemHandler >> 0x0A);
0002e0  0a91              LSRS     r1,r2,#10
;;;561      tmppos &= (u32)0x0F;
0002e2  f001010f          AND      r1,r1,#0xf
;;;562    
;;;563      tmppos = (u32)0x01 << tmppos;
0002e6  2401              MOVS     r4,#1
0002e8  fa04f101          LSL      r1,r4,r1
;;;564    
;;;565      tmp = SCB->SHCSR & tmppos;
0002ec  4c36              LDR      r4,|L1.968|
0002ee  3420              ADDS     r4,r4,#0x20
0002f0  6824              LDR      r4,[r4,#0]
0002f2  ea040301          AND      r3,r4,r1
;;;566    
;;;567      if (tmp == tmppos)
0002f6  428b              CMP      r3,r1
0002f8  d101              BNE      |L1.766|
;;;568      {
;;;569        bitstatus = SET;
0002fa  2001              MOVS     r0,#1
0002fc  e000              B        |L1.768|
                  |L1.766|
;;;570      }
;;;571      else
;;;572      {
;;;573        bitstatus = RESET;
0002fe  2000              MOVS     r0,#0
                  |L1.768|
;;;574      }
;;;575      return bitstatus;
;;;576    }
000300  bd10              POP      {r4,pc}
;;;577    
                          ENDP

                  NVIC_SetSystemHandlerPendingBit PROC
;;;589    *******************************************************************************/
;;;590    void NVIC_SetSystemHandlerPendingBit(u32 SystemHandler)
000302  2100              MOVS     r1,#0
;;;591    {
;;;592      u32 tmp = 0x00;
;;;593    
;;;594      /* Check the parameters */
;;;595      assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;596      
;;;597      /* Get the System Handler pending bit position */
;;;598      tmp = SystemHandler & (u32)0x1F;
000304  f000011f          AND      r1,r0,#0x1f
;;;599      /* Set the corresponding System Handler pending bit */
;;;600      SCB->ICSR |= ((u32)0x01 << tmp);
000308  4a2f              LDR      r2,|L1.968|
00030a  6812              LDR      r2,[r2,#0]
00030c  2301              MOVS     r3,#1
00030e  408b              LSLS     r3,r3,r1
000310  431a              ORRS     r2,r2,r3
000312  4b2d              LDR      r3,|L1.968|
000314  601a              STR      r2,[r3,#0]
;;;601    }
000316  4770              BX       lr
;;;602    
                          ENDP

                  NVIC_ClearSystemHandlerPendingBit PROC
;;;613    *******************************************************************************/
;;;614    void NVIC_ClearSystemHandlerPendingBit(u32 SystemHandler)
000318  b510              PUSH     {r4,lr}
;;;615    {
;;;616      u32 tmp = 0x00;
00031a  2100              MOVS     r1,#0
;;;617    
;;;618      /* Check the parameters */
;;;619      assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
;;;620      
;;;621      /* Get the System Handler pending bit position */
;;;622      tmp = SystemHandler & (u32)0x1F;
00031c  f000011f          AND      r1,r0,#0x1f
;;;623      /* Clear the corresponding System Handler pending bit */
;;;624      SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
000320  4a29              LDR      r2,|L1.968|
000322  6812              LDR      r2,[r2,#0]
000324  1e4b              SUBS     r3,r1,#1
000326  2401              MOVS     r4,#1
000328  409c              LSLS     r4,r4,r3
00032a  4322              ORRS     r2,r2,r4
00032c  4b26              LDR      r3,|L1.968|
00032e  601a              STR      r2,[r3,#0]
;;;625    }
000330  bd10              POP      {r4,pc}
;;;626    
                          ENDP

                  NVIC_GetSystemHandlerActiveBitStatus PROC
;;;643    *******************************************************************************/
;;;644    ITStatus NVIC_GetSystemHandlerActiveBitStatus(u32 SystemHandler)
000332  b510              PUSH     {r4,lr}
;;;645    {
000334  4602              MOV      r2,r0
;;;646      ITStatus bitstatus  = RESET;
000336  2000              MOVS     r0,#0
;;;647    
;;;648      u32 tmp = 0x00, tmppos = 0x00;
000338  2300              MOVS     r3,#0
00033a  2100              MOVS     r1,#0
;;;649    
;;;650      /* Check the parameters */
;;;651      assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
;;;652      
;;;653      tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
00033c  f3c23183          UBFX     r1,r2,#14,#4
;;;654    
;;;655      tmppos = (u32)0x01 << tmppos;
000340  2401              MOVS     r4,#1
000342  fa04f101          LSL      r1,r4,r1
;;;656    
;;;657      tmp = SCB->SHCSR & tmppos;
000346  4c20              LDR      r4,|L1.968|
000348  3420              ADDS     r4,r4,#0x20
00034a  6824              LDR      r4,[r4,#0]
00034c  ea040301          AND      r3,r4,r1
;;;658    
;;;659      if (tmp == tmppos)
000350  428b              CMP      r3,r1
000352  d101              BNE      |L1.856|
;;;660      {
;;;661        bitstatus = SET;
000354  2001              MOVS     r0,#1
000356  e000              B        |L1.858|
                  |L1.856|
;;;662      }
;;;663      else
;;;664      {
;;;665        bitstatus = RESET;
000358  2000              MOVS     r0,#0
                  |L1.858|
;;;666      }
;;;667      return bitstatus;
;;;668    }
00035a  bd10              POP      {r4,pc}
;;;669    
                          ENDP

                  NVIC_GetFaultHandlerSources PROC
;;;683    *******************************************************************************/
;;;684    u32 NVIC_GetFaultHandlerSources(u32 SystemHandler)
00035c  b530              PUSH     {r4,r5,lr}
;;;685    {
00035e  4601              MOV      r1,r0
;;;686      u32 faultsources = 0x00;
000360  2000              MOVS     r0,#0
;;;687      u32 tmpreg = 0x00, tmppos = 0x00;
000362  2200              MOVS     r2,#0
000364  2300              MOVS     r3,#0
;;;688    
;;;689      /* Check the parameters */
;;;690      assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
;;;691      
;;;692      tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
000366  f3c14281          UBFX     r2,r1,#18,#2
;;;693      tmppos = (SystemHandler >> 0x14) & (u32)0x03;
00036a  f3c15301          UBFX     r3,r1,#20,#2
;;;694    
;;;695      if (tmpreg == 0x00)
00036e  b91a              CBNZ     r2,|L1.888|
;;;696      {
;;;697        faultsources = SCB->HFSR;
000370  4c15              LDR      r4,|L1.968|
000372  3428              ADDS     r4,r4,#0x28
000374  6820              LDR      r0,[r4,#0]
000376  e011              B        |L1.924|
                  |L1.888|
;;;698      }
;;;699      else if (tmpreg == 0x01)
000378  2a01              CMP      r2,#1
00037a  d10c              BNE      |L1.918|
;;;700      {
;;;701        faultsources = SCB->CFSR >> (tmppos * 0x08);
00037c  4c12              LDR      r4,|L1.968|
00037e  3424              ADDS     r4,r4,#0x24
000380  6824              LDR      r4,[r4,#0]
000382  00dd              LSLS     r5,r3,#3
000384  fa24f005          LSR      r0,r4,r5
;;;702        if (tmppos != 0x02)
000388  2b02              CMP      r3,#2
00038a  d002              BEQ      |L1.914|
;;;703        {
;;;704          faultsources &= (u32)0x0F;
00038c  f000000f          AND      r0,r0,#0xf
000390  e004              B        |L1.924|
                  |L1.914|
;;;705        }
;;;706        else
;;;707        {
;;;708          faultsources &= (u32)0xFF;
000392  b2c0              UXTB     r0,r0
000394  e002              B        |L1.924|
                  |L1.918|
;;;709        }
;;;710      }
;;;711      else
;;;712      {
;;;713        faultsources = SCB->DFSR;
000396  4c0c              LDR      r4,|L1.968|
000398  342c              ADDS     r4,r4,#0x2c
00039a  6820              LDR      r0,[r4,#0]
                  |L1.924|
;;;714      }
;;;715      return faultsources;
;;;716    }
00039c  bd30              POP      {r4,r5,pc}
;;;717    
                          ENDP

                  NVIC_GetFaultAddress PROC
;;;729    *******************************************************************************/
;;;730    u32 NVIC_GetFaultAddress(u32 SystemHandler)
00039e  4601              MOV      r1,r0
;;;731    {
;;;732      u32 faultaddress = 0x00;
0003a0  2000              MOVS     r0,#0
;;;733      u32 tmp = 0x00;
0003a2  2200              MOVS     r2,#0
;;;734    
;;;735      /* Check the parameters */
;;;736      assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
;;;737      
;;;738      tmp = (SystemHandler >> 0x16) & (u32)0x01;
0003a4  f3c15280          UBFX     r2,r1,#22,#1
;;;739    
;;;740      if (tmp == 0x00)
0003a8  b91a              CBNZ     r2,|L1.946|
;;;741      {
;;;742        faultaddress = SCB->MMFAR;
0003aa  4b07              LDR      r3,|L1.968|
0003ac  3330              ADDS     r3,r3,#0x30
0003ae  6818              LDR      r0,[r3,#0]
0003b0  e002              B        |L1.952|
                  |L1.946|
;;;743      }
;;;744      else
;;;745      {
;;;746        faultaddress = SCB->BFAR;
0003b2  4b05              LDR      r3,|L1.968|
0003b4  3334              ADDS     r3,r3,#0x34
0003b6  6818              LDR      r0,[r3,#0]
                  |L1.952|
;;;747      }
;;;748      return faultaddress;
;;;749    }
0003b8  4770              BX       lr
;;;750    
                          ENDP

0003ba  0000              DCW      0x0000
                  |L1.956|
                          DCD      0xe000e180
                  |L1.960|
                          DCD      0xe000e284
                  |L1.964|
                          DCD      0xe000e400
                  |L1.968|
                          DCD      0xe000ed04
                  |L1.972|
                          DCD      0x05fa0000
                  |L1.976|
                          DCD      0xe000ef00
                  |L1.980|
                          DCD      0x1fffff80
